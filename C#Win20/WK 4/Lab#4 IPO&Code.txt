Design and implement a programming solution to each of the following problems:

1. Design and implement a program that asks the user to enter a number and determines if the number entered is a perfect number.  
A perfect number is a number that is equal to the sum of its factors excluding the number itself.  
6 is a perfect number because 1 + 2 + 3 = 6. 28 is the next perfect number.  Do this problem in dotnetfiddle.
Math
8/1 8/2 8/3 8/4 8/5 8/6 8/7 8/8
sum = 1+2+4=7
8 is not a perfect #

Input:
-uNum

Output:
-if uNum is a perfect number "Yes" +uNum " is a perfect #"

Algorithm:
-display instructions
-get Input
-count = 1
-sum = 0

while (count <= uNum *.5 )
	if (uNum is divisible by count) no remainder of 0 C#=%
		sum = sum + count
	end if
	count = count + 1
end while

if(sum = uNum)
	display perfect #
else
	display not perfect
end if


CODE:

        static void Main(string[] args)
        {
            int uNum;


            Console.WriteLine("Please enter a number and I'll tell you whether it's a perfect number.");
            Console.Write("Number: ");
            uNum = int.Parse(Console.ReadLine());
            int count = 1, sum = 0;

            //validation of the perfect #
            while (count <= uNum * .5)
            {
                if(uNum % count == 0)
                {
                    sum = sum + count; //sum+=count; compound assignment statment
                }
                count++; 
            }

            if (sum == uNum)
            {
                Console.WriteLine(uNum + " is a perfect number.");
            }
            else
            {
                Console.WriteLine(uNum + " is NOT a perfect number.");
            }

            Console.ReadLine();
        }
    }
}







2. Modify your solution to the problem above to display all of the perfect numbers between 1 and 1000.  Do this problem in dotnetfiddle.

Input:
-no input

Output:
-just the perfect #'s


Algorithm:
-display instructions
-number = 1
do
	count = 1
	sum = 0
	while (count <= uNum *.5 )
		if (uNum is divisible by count) meaning no remainder of 0 C#=%
			sum = sum + count
		end if
		count = count + 1
	end while

	if(sum = uNum)
		display is perfect #
	end if
	
	number = number +1
while (number <= 1000)


CODE:
        static void Main(string[] args)
        {
            int numbers = 1;

            Console.WriteLine("I'm going to show you the perfect numbers from 1 to 1000");

            do
            {
                int count = 1, sum = 0;

                //validation of the perfect #
                while (count <= numbers * .5)
                {
                    if (numbers % count == 0)
                    {
                        sum = sum + count; //sum+=count; compound assignment statment
                    }
                    count++;
                }

                if (sum == numbers)
                {
                    Console.WriteLine(numbers + " is a perfect number");
                }

                numbers++;

            } while (numbers <= 1000);

           Console.ReadLine();
        }
    }
}





3. Design and implement a program that asks the user to enter a number and determines if a number entered by the user is a prime number.  
A prime number is a number that is divisible only by 1 and itself.  2, 3, 5 and 7 are prime numbers.  4 and 9 are not prime numbers.  
Do this problem in Visual Studio.   

Input:
	uNum
Output:
	prime / not prime

Algorithm:
	display instructions
	get Input
	counter = 0
	
	/*for loop is to validate prime*/
	for (interger index = 1; index <= uNum; index plus one)
		if ( uNum divid by index and has a remainder of 0)
			increase counter by 1 
		end if
	end for
	
	/*the if else is to diaply message of prime or not*/
	if ( counter == 2)
		display uNum is a prime number
		
	else 
		display not a prime number
		
	end if

CODE:
        static void Main(string[] args)
        {
            int uNum;

            Console.WriteLine("Please enter a number and I'll tell you whether it's a prime number.");
            Console.Write("Number: ");
            uNum = int.Parse(Console.ReadLine());

            int counter = 0;

            //for loop to validate if the number is prime
            for(int i=1; i <=uNum; i++)
            {
                if(uNum % i == 0)
                {
                    counter++;
                }
            }

            //display if prime or not
            if (counter == 2)
            {
                Console.WriteLine(uNum + " is a prime number.");
            }
            else
            {
                Console.WriteLine(uNum + " is NOT a prime number.");
            }

            Console.ReadLine();
        }
    }
}





4. Edit your Rock Paper Scissors game from lab 3 to validate the user's input.  When the user enters something other than Rock, Paper or Scissors 
he/she/they should be forced reenter a choice.  Do this problem in Visual Studio.

Input:
	uChoice
	compChoice
	
	
Output:
	display outcome
	
	
Algorithm:
	display instructions
	promot user for their choice
	do 
		get uChoice
		if (uchoice < 1 or uChoice > 3)
			diplay incorrect input please enter 1, 2, or 3
	while (uchoice not equal 1(rock) and uChoice not equal 2(paper)  and uChoice not equal 3(scissors))
	or 
	while (uchoice < 1 or uChoice > 3) 
	
	
	generate cChoice
	
	/*validates winer*/
	if (uChoice is equal cChoice)
		tie
	else if(uChoice is equal rock and cChoice is equal scissors or
		uChoice is equal scissors and cChoice is equal  paper or
		uChoice is equal paper and cChoice is equal rock)
			display you win
	else 
		display cChoice won
		
CODE:
static void Main(string[] args)
        {
            // define variable for answering the math question
            const int ROCK = 1, PAPER = 2, SCISSORS = 3;
            int uChoice, cChoice;

            //display instructions
            Console.WriteLine("We're going to play Rock, Paper, Scissors. " +
                "You will be playing with a computer and entering 1 for rock, 2 for paper, or 3 for scissors." +
                "Let's get going");

            //get user choice and validate 
            do
            {
                uChoice = int.Parse(Console.ReadLine());
                if (uChoice < 1 || uChoice > 3)
                {
                    Console.WriteLine("Incorrect option please enter 1 for rock, 2 for paper, or 3 for scissors.");
                }
            } while (uChoice < 1 || uChoice > 3);
            

            //generate random computer choice
            Random generator = new Random();
            cChoice = generator.Next(1, 4);

            //displaying what computer picked
            if (cChoice == ROCK)
            {
                Console.WriteLine("Computer picked ROCK " + cChoice);
            }
            else if (cChoice == SCISSORS)
            {
                Console.WriteLine("Computer picked SCISSORS " + cChoice);
            }
            else
            {
                Console.WriteLine("Computer picked PAPER " + cChoice);
            }



            //verify tie, win, or draw and display message. 
            if (uChoice == cChoice)
            {
                Console.WriteLine("You tied with the computer");
            }
            else if (uChoice == ROCK && cChoice == SCISSORS ||
                    uChoice == SCISSORS && cChoice == PAPER ||
                    uChoice == PAPER && cChoice == ROCK)
            {
                Console.WriteLine("You won!!");
            }
            else
            {
                Console.WriteLine("Computer won!!");
            }




            Console.ReadLine();
        }
    }
}

		

		
5. Edit your Rock Paper Scissors game from number 4 above to allow the user to play again.  
The program should keep track of how many times the user wins and the computer wins.  Do this problem in Visual Studio.
	
*add play again to code #4

Input:
	uChoice
	compChoice
	repeat
	
Output:
	display outcome
	
	
Algorithm:
	do
		display instructions
		promot user for their choice
		
		/*validates uChoice*/
		do 
			get uChoice
			if (uchoice < 1 or uChoice > 3)
				diplay incorrect input please enter 1, 2, or 3
		while (uchoice not equal 1(rock) and uChoice not equal 2(paper)  and uChoice not equal 3(scissors))
		or 
		while (uchoice < 1 or uChoice > 3) 
		
		
		generate cChoice
		
		/*validates winer*/
		if (uChoice is equal cChoice)
			tie
		else if(uChoice is equal rock and cChoice is equal scissors or
			uChoice is equal scissors and cChoice is equal  paper or
			uChoice is equal paper and cChoice is equal rock)
				display you win
		else 
			display cChoice won
		
		/*play again question*/
		do
			get repeat from user 
			if (reapet != 'y' and reapet != 'n')
				please enter y or n to play again
		while ( reapet != 'y' and reapet != 'n')

		
		
	while (repeat equals yes)
	
CODE:

        static void Main(string[] args)
        {
            // define variable for answering the math question
            const int ROCK = 1, PAPER = 2, SCISSORS = 3;
            int uChoice, cChoice;
            string repeat;

            do
            {
                //display instructions
                Console.WriteLine("We're going to play Rock, Paper, Scissors. " +
                    "You will be playing with a computer and entering 1 for rock, 2 for paper, or 3 for scissors." +
                    "Let's get going");

                //get user choice and validate 
                do
                {
                    uChoice = int.Parse(Console.ReadLine());
                    if (uChoice < 1 || uChoice > 3)
                    {
                        Console.WriteLine("Incorrect option please enter 1 for rock, 2 for paper, or 3 for scissors.");
                    }
                } while (uChoice < 1 || uChoice > 3);


                //generate random computer choice
                Random generator = new Random();
                cChoice = generator.Next(1, 4);

                //displaying what computer picked
                if (cChoice == ROCK)
                {
                    Console.WriteLine("Computer picked ROCK " + cChoice);
                }
                else if (cChoice == SCISSORS)
                {
                    Console.WriteLine("Computer picked SCISSORS " + cChoice);
                }
                else
                {
                    Console.WriteLine("Computer picked PAPER " + cChoice);
                }



                //verify tie, win, or draw and display message. 
                if (uChoice == cChoice)
                {
                    Console.WriteLine("You tied with the computer");
                }
                else if (uChoice == ROCK && cChoice == SCISSORS ||
                        uChoice == SCISSORS && cChoice == PAPER ||
                        uChoice == PAPER && cChoice == ROCK)
                {
                    Console.WriteLine("You won!!");
                }
                else
                {
                    Console.WriteLine("Computer won!!");
                }

                //validates the if the user put Y or n and then moves to main loop.
                do
                {
                    Console.WriteLine("Do you want to play again?");
                
                    repeat = Console.ReadLine(); 
                    repeat = repeat.ToLower();

                    if (repeat != "y" && repeat != "n")
                    {
                        Console.WriteLine("Incorrect option please enter y or n");
                    }
                } while (repeat != "y" && repeat != "n");

            } while (repeat == "y");


            Console.ReadLine();
        }
    }
}

		

6. Design and implement a program that allows the user to play a "Guess My Number" game with the computer.  
When the game starts the program will generate a random number between 1 and 50.  The user should be prompted to guess the 
number and to enter a number from the keyboard.  The program will display one of the following messages when the user's 
guess is incorrect:  "Too high" or "Too low".  The user should be allowed to continue guessing until he/she/they guess correctly.  
The program should keep track of number of guesses that the user makes and should display the number of guesses along with a 
congratulatory message at the end of the game.  Do this problem in Visual Studio.  


Input:
	uGuess

Output:
	if uGuess is correct or not

Algorithm:

	Display instruction
	Generate random numbers
	numGuess=0
	
	do
		get uGuess
		numGuess++
		if (uGuess < random number)
			display to small
		else if	( uGuess > random number)
			display to large
		else if (uGuess== nadom number)
			display you guessed correct. 
		end if
	while (uGuess != random number)
	
Code:

        static void Main(string[] args)
        {
            // define variable for answering the math question
            int uGuess, numGuess, randNum;
            string repeat;

            do
            {
                //display instructions
                Console.WriteLine("We're going to play guess the number between 1-50" +
                    "and we'll play until you guess the right number.");

                //generate random number
                Random generator = new Random();
                randNum = generator.Next(1, 50);

                //numGuess is initiaed to 0
                numGuess = 0;

                //user choice
                Console.Write("What is your guess? ");

                //validate user choice
                do
                {
                    
                    uGuess = int.Parse(Console.ReadLine());
                    numGuess++;

                    if(uGuess<randNum)
                    {
                        Console.Write("Your guess is to low, guess again: ");
                    }
                    else if(uGuess>randNum)
                    {
                        Console.Write("Your guess is to high, guess again: ");
                    }
                    else if(uGuess==randNum)
                    {
                        Console.WriteLine("Correct guess! You got it in " +numGuess+ " guess!");
                    }

                } while (uGuess != randNum);

                //validates the if the user put Y or n and then moves to main loop.
                do
                {
                    Console.WriteLine("Do you want to play again?");
                
                    repeat = Console.ReadLine(); 
                    repeat = repeat.ToLower();

                    if (repeat != "y" && repeat != "n")
                    {
                        Console.WriteLine("Incorrect option please enter y or n");
                    }
                } while (repeat != "y" && repeat != "n");

            } while (repeat == "y");


            Console.ReadLine();
        }
    }
}